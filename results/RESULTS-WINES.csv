
	countSpeciesInSet(testSet, species)

	# generate predictions
	if isNormalized == 1:
		normalize(trainingSet)
		normalize(testSet)

	distanceMethods = (euclideanDistance, manhattanDistance, chybeshevDistance)
	for distanceMethod in distanceMethods:
		print('Method name: ' + repr(distanceMethod))
		for kNeighbor in kNeighbors:
			predictions=[]
			for x in range(len(testSet)):
				neighbors = getNeighbors(distanceMethod, trainingSet, testSet[x], kNeighbor)
				result = getResponse(neighbors)
				predictions.append(result)
				#print('> predicted=' + repr(result) + ', actual=' + repr(testSet[x][-1]))
			accuracy = getAccuracy(testSet, predictions)
			print('Accuracy: ' + repr(accuracy) + '%')

			def countSpeciesInSet(dataSet, species):
				columns = np.shape(dataSet)[1]
				speciesOne = 0
				speciesTwo = 0
				speciesThree = 0
				for x in range(len(dataSet)):
					if dataSet[x][columns-1] == list(species)[0]:
						speciesOne += 1
					elif dataSet[x][columns-1] == list(species)[1]:
						speciesTwo += 1
					elif dataSet[x][columns-1] == list(species)[2]:
						speciesThree += 1
				print('Spiece one ' + repr(speciesOne))
				print('Spiece two ' + repr(speciesTwo))
				print('Spiece three ' + repr(speciesThree))
